exec drop_table('api_token');

begin 
   if 1=1 then 
      drop_table('cookie');
      drop_table('flash_message');
      drop_table('nav_menu');
   end if;
end;
/

-- ToDo: Part of install needs to clean up orphan recs in this table since we 
-- can't have a fk on saas_auth since some cookies may be session level only.

-- uninstall: exec drop_table('cookie');
begin
   if not does_table_exist('cookie') then 
      execute_sql('
      create table cookie (
         id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
         user_id number default null,
         session_id number default null,
         cookie_name varchar2(128),
         cookie_value varchar2(2048),
         secure varchar2(1) default ''Y'',
         created_at date default sysdate,
         expires_at date default null
         )');
   end if;
   if not does_constraint_exist('pk_cookie_id') then 
      execute_sql(
         'alter table cookie add constraint pk_cookie_id primary key (id)');
   end if;
end;
/

-- uninstall: exec drop_table('flash_message');
begin
   if not does_table_exist('flash_message') then 
      execute_sql('
      create table flash_message (
         id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
         message_type varchar2(128) default ''notice'' not null,
         user_name varchar2(128) default null,
         session_id number default null,
         message varchar2(2048),
         created_at date default sysdate,
         expires_at date default null
         )');
   end if;
   if not does_constraint_exist('pk_flash_message_id') then 
      execute_sql(
         'alter table flash_message add constraint pk_flash_message_id primary key (id)');
   end if;
   if not does_index_exist('flash_message_2') then 
      execute_sql(
         'create index flash_message_2 on flash_message(message_type)');
   end if;
   if not does_index_exist('flash_message_3') then 
      execute_sql(
         'create index flash_message_3 on flash_message(session_id)');
   end if;
   if not does_column_exist('flash_message', 'user_name') then 
      execute_sql(
         'alter table flash_message add (user_name varchar2(128) default null)');
   end if;
   -- We don't need this column. We may flash a message based on session id and not have an account associated with the session.
   if does_column_exist('flash_message', 'user_id') then 
      execute_sql(
         'alter table flash_message drop column user_id');
   end if;
end;
/

-- uninstall: exec drop_view('user_flash_message');
create or replace view user_flash_message as (
    select * from flash_message
     where (user_name=lower(v('APP_USER'))
        or session_id=v('APP_SESSION'))
       and (expires_at<=sysdate
        or expires_at is null));


-- uninstall: exec drop_table('nav_menu');
exec drop_table('nav_menu');
begin 
   if not does_table_exist('nav_menu') then
      execute_sql('
      create table nav_menu (
      nav_menu_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      nav_menu_key varchar(255) not null,
      menu_level number default 0,
      menu_title varchar(255) not null,
      page_no number default null,
      page_alias varchar(255) default null,
      parent_id number default null,
      -- Placeholder, we could build custom menus for users.
      -- user_id number,
      nav_id number default null,
      icon_img varchar(32) default null,
      -- Can be null (all users), public (public users only), private (authenticated user only)
      user_state varchar2(32) default null)');
   end if;
   add_primary_key('nav_menu', 'nav_menu_id');
end;
/

set define off

create or replace view nav_menu_v as
select
    menu_level "level",
    -- Not using but could use replacements in menus like this.
    replace(menu_title, '#APP_USER#', lower(v('APP_USER'))) "label",
    decode( connect_by_isleaf, 0, '','f?p=&APP_ID.:'
         || nvl(page_alias, to_char(page_no)) || ':' 
         || '&SESSION.:'
         || '&REQUEST.:' 
         || '::::' 
         ) target,
    -- ToDo: Need to handle page no here also!
    decode(lower(page_alias), lower(v('APP_PAGE_ALIAS')), 'YES', 'NO') as is_current,
    decode(nvl(ICON_IMG, 'A'), 'A', '', ICON_IMG) image,
    nav_menu_key attribute1
  from nav_menu
 where (user_state is null)
    or (v('APP_USER')='nobody' and user_state='public')
    or (v('APP_USER')!='nobody' and user_state='private')
start with
    parent_id is null
connect by
    prior nav_id = parent_id 
    order siblings by nav_menu_key, nav_id;

set define on

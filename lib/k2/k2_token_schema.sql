
begin
   if 1=2 then
      drop_table('tokens');
   end if;
end;
/

exec drop_table('access_keys');
exec drop_table('token');

-- uninstall: exec drop_table('tokens');
begin 
	if not does_table_exist('tokens') then 
		execute_sql('
		create table tokens (
		token_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
		token_key varchar2(256) not null, -- User defined string which can be used to identify a unique token
		token_description varchar2(512) default null, -- User defined description of the token
		token_alt_id number default null, -- Can be used to associate the token with another object in your app, user defined.
		token_type varchar2(256) not null, -- Used to logically determine what this token is associated with, user defined.
		token varchar2(256) not null, -- Auto generated on insert if user does not provide one
		token_url varchar2(512) default null, -- URL ref which can be used to invoke some action with this token
		is_enabled number default 1 not null,
		user_id number default null,
		expires timestamp default null,
		created timestamp default systimestamp,
		token_date timestamp default systimestamp,
		updated timestamp default systimestamp)', false);
	end if;
	add_primary_key('tokens', 'token_id');
	if not does_index_exist('token_1') then
		execute_sql('create unique index token_1 on tokens (token_key)', false);
	end if;
	if not does_column_exist('tokens', 'token_url') then
		execute_sql('alter table tokens add token_url varchar2(512) default null', false);
	end if;
end;
/

create or replace trigger tokens_before_insert_trg 
   before insert on tokens for each row
begin
   arcsql.assert_str_is_key_str(:new.token_key);
   if :new.token_key is null then
      :new.token_key := sys_guid;
   end if;
   if :new.token is null then
   	:new.token := dbms_crypto.randombytes(32);
   end if;
end;
/
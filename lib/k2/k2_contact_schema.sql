
begin
   if 1=1 then
      drop_table('contact_groups');
      drop_table('contacts');
      drop_table('contact_group_contacts');
      drop_table('contact_group_members');
      drop_table('contact_group_priority_groups');
      drop_table('contact_group_messages');
      drop_table('contact_messages');
   end if;
end;
/

/*

This module is used to create groups of contacts

Contacts can be linked to one or more groups

Each contact, group, and group contact has ability to define if it is enabled using y/n/cron type definitions.

The same is true of the contact method (email, sms, or eventually others).

When an alert is opened it is always linked to a priority group which is a set of priorities.

The alert is linked to a specific priority but that can change over the course of the life of the alert since priorities can also be enabled or disabled using cron type attributes.

Contact groups can be linked to one or more priority groups. This is how we know who to route messages to.

*/

-- uninstall: exec drop_table('contact_groups');
begin
   if not does_table_exist('contact_groups') then 
      execute_sql(q''
      create table contact_groups (
      contact_group_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      contact_group_key varchar2(256) not null,
      contact_group_name varchar2(256) default null, 
      is_contact_group_text_active varchar2(32) default 'y' not null,
      is_contact_group_active varchar2(32) default 'y' not null,
      is_contact_group_out_of_office varchar2(32) default 'n' not null,
      user_id number default null,
      contact_group_alt_id number default null)
      '');
   end if;
   if not does_constraint_exist('pk_contact_groups') then 
      execute_sql('alter table contact_groups add constraint pk_contact_groups primary key (contact_group_id)', false);
   end if;
   if not does_index_exist('contact_groups_1') then 
      execute_sql('create unique index contact_groups_1 on contact_groups (contact_group_key)', false);
   end if;
end;
/

create or replace trigger contact_groups_insert_trg 
   before insert on contact_groups for each row
begin
   arcsql.assert_str_is_key_str(:new.contact_group_key);
end;
/

-- uninstall: exec drop_table('contact_group_messages');
begin 
   if not does_table_exist('contact_group_messages') then 
      execute_sql(q''
      create table contact_group_messages (
      contact_group_message_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      contact_group_id number not null,
      message varchar2(4000) not null,
      -- email or text
      delivery_method varchar2(32) not null,
      created timestamp default systimestamp not null,
      -- pending, sent, failed
      delivery_status varchar2(32) default 'pending' not null,
      delivery_status_reason varchar2(256) default null,
      expires timestamp default null)
      '');
   end if;
   add_primary_key('contact_group_messages', 'contact_group_message_id');
   if not does_constraint_exist('fk_contact_group_messages_contact_group_id') then 
      execute_sql('alter table contact_group_messages add constraint fk_contact_group_messages_contact_group_id foreign key (contact_group_id) references contact_groups (contact_group_id) on delete cascade', false);
   end if;
end;
/

-- uninstall: exec drop_table('contacts');
begin 
   if not does_table_exist('contacts') then 
      execute_sql(q''
      create table contacts (
      contact_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      contact_key varchar2(256) not null,
      contact_name varchar2(256) not null,
      email_address varchar2(256),
      -- This is also an email address for now.
      text_address varchar2(256),
      user_id number default null,
      contact_alt_id number default null,
      is_contact_text_active varchar2(32) default 'y' not null,
      is_contact_active varchar2(32) default 'y' not null,
      is_contact_out_of_office varchar2(32) default 'n' not null,
      attribute_1 varchar2(256) default null,
      attribute_2 varchar2(256) default null,
      attribute_3 varchar2(256) default null,
      attribute_4 varchar2(256) default null,
      attribute_5 varchar2(256) default null)
      '');
   end if;
   add_primary_key('contacts', 'contact_id');
end;
/

create or replace trigger contacts_insert_trg 
   before insert on contacts for each row
begin
   arcsql.assert_str_is_key_str(:new.contact_key);
end;
/

-- uninstall: exec drop_table('contact_group_members');
begin
   if not does_table_exist('contact_group_members') then
      execute_sql(q''
      create table contact_group_members (
      contact_group_member_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      contact_group_id number not null,
      contact_id number default null,
      -- Contact will only be included if the priority level is =< this value.
      max_priority_level number default 1 not null,
      -- Contact will only be included if the priority level is => this value.
      min_priority_level number default 5 not null,
      is_contact_group_member_text_active varchar2(32) default 'y' not null,
      is_contact_group_member_active varchar2(32) default 'y' not null,
      is_contact_group_member_out_of_office varchar2(32) default 'n' not null)
      '');
   end if;
   add_primary_key('contact_group_members', 'contact_group_member_id');
   if not does_constraint_exist('fk_contact_group_members_contact_group_id') then 
      execute_sql('alter table contact_group_members add constraint fk_contact_group_members_contact_group_id foreign key (contact_group_id) references contact_groups (contact_group_id) on delete cascade', false);
   end if;
   if not does_constraint_exist('fk_contact_group_members_contact_id') then 
      execute_sql('alter table contact_group_members add constraint fk_contact_group_members_contact_id foreign key (contact_id) references contacts (contact_id) on delete cascade', false);
   end if;
end;
/

-- uninstall: exec drop_table('contact_group_priority_groups');
begin 
   if not does_table_exist('contact_group_priority_groups') then 
      execute_sql(q''
      create table contact_group_priority_groups (
      contact_group_alert_priority_group_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      contact_group_id number not null,
      alert_priority_group_id number not null)
      '');
   end if;
   add_primary_key('contact_group_priority_groups', 'contact_group_alert_priority_group_id');
   if not does_constraint_exist('fk_contact_group_priority_groups_contact_group_id') then 
      execute_sql(q''alter table contact_group_priority_groups add constraint fk_contact_group_priority_groups_contact_group_id foreign key (contact_group_id) references contact_groups (contact_group_id) on delete cascade'');
   end if;
   if not does_constraint_exist('fk_contact_group_priority_groups_priority_group_id') then 
      execute_sql(q''alter table contact_group_priority_groups add constraint fk_contact_group_priority_groups_priority_group_id foreign key (alert_priority_group_id) references alert_priority_groups (alert_priority_group_id) on delete cascade'');
   end if;
end;
/

-- uninstall: exec drop_table('contact_messages');
begin 
   if not does_table_exist('contact_messages') then 
      execute_sql(q''
      create table contact_messages (
      contact_message_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      contact_id number not null,
      message varchar2(4000) not null,
      -- email or text
      delivery_method varchar2(32) not null,
      created timestamp default systimestamp not null,
      -- pending, sent, failed
      delivery_status varchar2(32) default 'pending' not null,
      delivery_status_reason varchar2(256) default null,
      expires timestamp default null)
      '');
   end if;
   add_primary_key('contact_messages', 'contact_message_id');
   if not does_constraint_exist('fk_contact_messages_contact_id') then 
      execute_sql('alter table contact_messages add constraint fk_contact_messages_contact_id foreign key (contact_id) references contacts (contact_id) on delete cascade', false);
   end if;
end;
/

exec drop_view('alert_contacts_view');
-- create or replace view alert_contacts_view as 
-- select a.alert_id,
--        a.alert_key,
--        a.alert_status,
--        a.alert_text,
--        a.last_event,
--        a.last_event_type,
--        a.opened,
--        a.closed,
--        a.abandoned,
--        a.reminders_count,
--        a.reminder,
--        a.try_email,
--        a.try_sms,
--        c.alert_priority_group_id,
--        b.priority_level,
--        b.priority_name,
--        g.contact_id,
--        g.contact_key,
--        g.contact_name,
--        g.email_address,
--        g.text_address,
--        e.contact_group_id,
--        e.contact_group_key,
--        e.contact_group_name,
--        e.is_enabled contact_group_is_enabled,
--        f.sms_enabled contact_sms_enabled,
--        f.max_priority_level contact_max_priority_level,
--        f.min_priority_level contact_min_priority_level,
--        f.email_enabled contact_email_enabled
--   from alerts a,
--        alert_priorities b,
--        alert_priority_groups c,
--        contact_group_priority_groups d,
--        contact_groups e,
--        contact_group_members f,
--        contacts g
--  where a.priority_id=b.priority_id
--    and b.alert_priority_group_id=c.alert_priority_group_id
--    and b.alert_priority_group_id=d.alert_priority_group_id
--    and d.contact_group_id=e.contact_group_id
--    and d.contact_group_id=f.contact_group_id
--    and f.contact_id=g.contact_id
--    -- We do factor in priority level bounds here
--    and b.priority_level between f.max_priority_level and f.min_priority_level;
   
exec drop_view('contact_report_view');
-- create or replace view contact_report_view as
-- select null alert_id,
--        null contact_id,
--        null contact_group_id,
--        rpad('Alert', 70)||' | '||
--        rpad('Last event', 10)||' | '||
--        rpad('Mins ago', 10)||' | '||
--        rpad('Event time', 16)||' | '||
--        rpad('Opened time', 16)||' | '||
--        rpad('Open hrs', 10) full_text
--  from dual
-- union all
-- select alert_id,
--        contact_id,
--        contact_group_id,
--        rpad(priority_name ||'('||alert_status||')'||' - '||substr(alert_text, 1, 68), 70)||' | '||
--        rpad(last_event_type, 10)||' | '||
--        rpad(last_event_minutes_ago||'m', 10)||' | '||
--        rpad(last_event_time, 16)||' | '||
--        rpad(opened_time, 16)||' | '||
--        rpad(opened_hours_ago||'h', 10) full_text
--   from (
-- select alert_id,
--        contact_id,
--        contact_group_id,
--        last_event_type,
--        round(arcsql.secs_between_timestamps(last_event, systimestamp)/60) last_event_minutes_ago,
--        alert_status,
--        alert_text,
--        round(arcsql.secs_between_timestamps(opened, systimestamp)/60/60, 1) opened_hours_ago,
--        priority_level,
--        priority_name,
--        to_char(last_event, 'MM/DD HH24:MI') last_event_time,
--        to_char(opened, 'MM/DD HH24:MI') opened_time
--   from alert_contacts_view
--  order
--     by priority_level desc,
--        last_event_time desc);   


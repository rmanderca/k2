
exec drop_table('contact_groups');
exec drop_table('contacts');
exec drop_table('contact_group_contacts');
exec drop_table('contact_group_priority_groups');

/*

This module is used to create groups of contacts

Contacts can be linked to one or more groups

Each contact, group, and group contact has ability to define if it is enabled using y/n/cron type definitions.

The same is true of the contact method (email, sms, or eventually others).

When an alert is opened it is always linked to a priority group which is a set of priorities.

The alert is linked to a specific priority but that can change over the course of the life of the alert since priorities can also be enabled or disabled using cron type attributes.

Contact groups can be linked to one or more priority groups. This is how we know who to route messages to.

*/

-- uninstall: exec drop_table('contact_groups');
begin
   if not does_table_exist('contact_groups') then 
      execute_sql('
      create table contact_groups (
      contact_group_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      contact_group_key varchar2(240) not null,
      contact_group_name varchar2(240) default null, 
      -- Truthy/cron values are allowed below on the 3 is_ columns.
      is_enabled varchar2(20) default ''Y'' not null,
      is_sms_disabled varchar2(20) default ''N'' not null,
      user_id number default null)', false);
   end if;
   if not does_constraint_exist('pk_contact_groups') then 
      execute_sql('alter table contact_groups add constraint pk_contact_groups primary key (contact_group_id)', false);
   end if;
   if not does_index_exist('contact_groups_1') then 
      execute_sql('create unique index contact_groups_1 on contact_groups (contact_group_key)', false);
   end if;
end;
/

-- uninstall: exec drop_table('contacts');
begin 
   if not does_table_exist('contacts') then 
      execute_sql('
      create table contacts (
      contact_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      contact_key varchar2(240) not null,
      contact_name varchar2(240) not null,
      email_address varchar2(240),
      sms_address varchar2(240),
      user_id number default null
      )', false);
      execute_sql('alter table contacts add constraint pk_contacts primary key (contact_id)', false);
   end if;
end;
/

-- uninstall: exec drop_table('contact_group_contacts');
begin
   if not does_table_exist('contact_group_contacts') then
      execute_sql('
      create table contact_group_contacts (
      contact_group_contact_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      contact_group_id number not null,
      contact_id number default null,
      -- Contact will only be included if the priority level is =< this value.
      max_priority_level number default 1 not null,
      -- Contact will only be included if the priority level is => this value.
      min_priority_level number default 5 not null,
      is_enabled varchar2(20) default ''Y'' not null,
      email_enabled varchar2(20) default ''Y'',
      sms_enabled varchar2(20) default ''Y''
      )', false);
   end if;
   if not does_constraint_exist('pk_contact_group_contacts') then 
      execute_sql('alter table contact_group_contacts add constraint pk_contact_group_contacts primary key (contact_group_contact_id)', false);
   end if;
   if not does_constraint_exist('fk_cgc_contact_group_id') then 
      execute_sql('alter table contact_group_contacts add constraint fk_cgc_contact_group_id foreign key (contact_group_id) references contact_groups (contact_group_id)', false);
   end if;
end;
/

-- uninstall: exec drop_table('contact_group_priority_groups');
begin 
   if not does_table_exist('contact_group_priority_groups') then 
      execute_sql('
      create table contact_group_priority_groups (
      contact_group_subscription_id number generated by default on null as identity cache 20 noorder nocycle nokeep noscale not null,
      contact_group_id number not null,
      priority_group_id number not null)', false);
   end if;
   if not does_constraint_exist('pk_contact_group_priority_groups') then 
      execute_sql('alter table contact_group_priority_groups add constraint pk_contact_group_subscriptions primary key (contact_group_subscription_id)', false);
   end if;
   if not does_constraint_exist('fk_cgpg_contact_group_id') then 
      execute_sql('alter table contact_group_priority_groups add constraint fk_cgpg_contact_group_id foreign key (contact_group_id) references contact_groups (contact_group_id)', false);
   end if;
   if not does_constraint_exist('fk_cgpg_priority_group_id') then 
      execute_sql('alter table contact_group_priority_groups add constraint fk_cgpg_priority_group_id foreign key (priority_group_id) references alert_priority_groups (priority_group_id)', false);
   end if;
end;
/

-- uninstall: drop_view('alert_contacts_view');
create or replace view alert_contacts_view as 
select a.alert_id,
       a.alert_key,
       a.alert_status,
       a.alert_text,
       a.last_event,
       a.last_event_type,
       a.opened,
       a.closed,
       a.abandoned,
       a.reminders_count,
       a.reminder,
       a.try_email,
       a.try_sms,
       c.priority_group_id,
       b.priority_level,
       b.priority_name,
       g.contact_id,
       g.contact_key,
       g.contact_name,
       g.email_address,
       g.sms_address,
       e.contact_group_id,
       e.contact_group_key,
       e.contact_group_name,
       e.is_enabled contact_group_is_enabled,
       f.sms_enabled contact_sms_enabled,
       f.max_priority_level contact_max_priority_level,
       f.min_priority_level contact_min_priority_level,
       f.email_enabled contact_email_enabled
  from alerts a,
       alert_priorities b,
       alert_priority_groups c,
       contact_group_priority_groups d,
       contact_groups e,
       contact_group_contacts f,
       contacts g
 where a.priority_id=b.priority_id
   and b.priority_group_id=c.priority_group_id
   and b.priority_group_id=d.priority_group_id
   and d.contact_group_id=e.contact_group_id
   and d.contact_group_id=f.contact_group_id
   and f.contact_id=g.contact_id
   -- We do factor in priority level bounds here
   and b.priority_level between f.max_priority_level and f.min_priority_level;
   
-- uninstall: drop_view('contact_report_view');
create or replace view contact_report_view as
select null alert_id,
       null contact_id,
       null contact_group_id,
       rpad('Alert', 70)||' | '||
       rpad('Last event', 10)||' | '||
       rpad('Mins ago', 10)||' | '||
       rpad('Event time', 16)||' | '||
       rpad('Opened time', 16)||' | '||
       rpad('Open hrs', 10) full_text
 from dual
union all
select alert_id,
       contact_id,
       contact_group_id,
       rpad(priority_name ||'('||alert_status||')'||' - '||substr(alert_text, 1, 68), 70)||' | '||
       rpad(last_event_type, 10)||' | '||
       rpad(last_event_minutes_ago||'m', 10)||' | '||
       rpad(last_event_time, 16)||' | '||
       rpad(opened_time, 16)||' | '||
       rpad(opened_hours_ago||'h', 10) full_text
  from (
select alert_id,
       contact_id,
       contact_group_id,
       last_event_type,
       round(arcsql.secs_between_timestamps(last_event, systimestamp)/60) last_event_minutes_ago,
       alert_status,
       alert_text,
       round(arcsql.secs_between_timestamps(opened, systimestamp)/60/60, 1) opened_hours_ago,
       priority_level,
       priority_name,
       to_char(last_event, 'MM/DD HH24:MI') last_event_time,
       to_char(opened, 'MM/DD HH24:MI') opened_time
  from alert_contacts_view
 order
    by priority_level desc,
       last_event_time desc);   


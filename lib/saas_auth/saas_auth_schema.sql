

exec drop_table('saas_auth_role');
exec drop_column('saas_auth', 'role_id');
exec drop_column('saas_auth', 'is_test_user');
exec drop_view('v_saas_auth_available_accounts');

begin 
   drop_column('saas_auth', 'email_verification_token');
   drop_column('saas_auth', 'email_verification_token_expires_at');
   drop_column('saas_auth', 'reset_pass_token');
   drop_column('saas_auth', 'reset_pass_expire');
   drop_column('saas_auth', 'remove_date');
   drop_column('saas_auth', 'email_count');
   drop_column('saas_auth', 'app_init');
   drop_column('saas_auth', 'auto_login');
   drop_column('saas_auth', 'auto_login_expire');
end;
/

-- uninstall: exec drop_table('saas_auth');
begin
   if not does_table_exist('saas_auth') then 
      execute_sql('
      create table saas_auth (
      user_id number generated by default on null as identity minvalue 1 maxvalue 9999999999999999999999999999 increment by 1 start with 1 cache 20 noorder nocycle nokeep noscale not null,
      user_name varchar2(120) not null,
      email varchar2(120) not null,     
      full_name varchar2(120) default null,                          
      uuid varchar2(120) default sys_guid(),                      -- Used as an additional salt to hash pass.
      email_verified date default null,                           -- When the email was verified.
      email_old varchar2(120) default null,
      password varchar2(120) not null,
      last_session_id varchar2(120) default null,
      last_login date default null,
      login_count number default 0,
      last_failed_login date default null,
      failed_login_count number default 0,
      -- inactive      - Account has no known password and is not verified.
      -- active        - Account is in good standing. Usually verified and password is defined.
      account_status varchar2(12) default ''active'',
      -- user     - Normal user account.
      -- admin    - Account has admin privs.
      -- system   - Account has admin privs but can not login through the UI and password is unknown.
      account_type varchar2(12) default ''user'',
      -- An auth token can be used one time to automatically log into the site.
      auth_token varchar2(120) default null,
      auth_token_expire date default null,
      auto_token varchar2(120) default null,
      auto_token_expire date default null,
      last_email timestamp default null,
      created date not null,
      created_by varchar2(120) not null,
      updated date not null,
      updated_by varchar2(120) not null,
      -- This is set each time the user logs in by detecting the current value from the browser.
      timezone_name varchar2(120) default null,
      timezone_offset varchar2(12) default null
      )', false);
   end if;
   add_pk_constraint('saas_auth', 'user_id');
   if not does_index_exist('saas_auth_1') then 
      execute_sql('
         create unique index saas_auth_1 on saas_auth (user_name)', false);
   end if;
   if not does_column_exist('saas_auth', 'email_verification_token') then 
      execute_sql('
         alter table saas_auth add (email_verification_token varchar2(12) default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'email_verification_token_expires_at') then 
      execute_sql('
         alter table saas_auth add (email_verification_token_expires_at date default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'email_verified') then 
      execute_sql('
         alter table saas_auth add (email_verified date default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'email_old') then 
      execute_sql('
         alter table saas_auth add (email_old varchar2(120) default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'uuid') then 
      execute_sql('
         alter table saas_auth add (uuid varchar2(120) default sys_guid())', false);
   end if;
   if not does_column_exist('saas_auth', 'account_status') then 
      execute_sql('
         alter table saas_auth add (account_status varchar2(12) default ''active'')', false);
   end if;
   if not does_column_exist('saas_auth', 'auto_login') then 
      execute_sql('
         alter table saas_auth add (auto_login date default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'auto_login_token') then 
      execute_sql('
         alter table saas_auth add (auto_login_token varchar2(120) default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'remove_date') then 
      execute_sql('
         alter table saas_auth add (remove_date date default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'email_count') then 
      execute_sql('
         alter table saas_auth add (email_count number default 0)', false);
   end if;
   if not does_column_exist('saas_auth', 'last_email') then 
      execute_sql('
         alter table saas_auth add (last_email timestamp default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'account_type') then
      execute_sql('
         alter table saas_auth add (account_type varchar2(12) default ''user'')', false);
   end if;
   if not does_column_exist('saas_auth', 'full_name') then
      execute_sql('
         alter table saas_auth add (full_name varchar2(120) default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'auth_token') then
      execute_sql('
         alter table saas_auth add (auth_token varchar2(120) default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'auth_token_expire') then
      execute_sql('
         alter table saas_auth add (auth_token_expire date default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'auto_token') then
      execute_sql('
         alter table saas_auth add (auto_token varchar2(120) default null)', false);
   end if;
   if not does_column_exist('saas_auth', 'auto_token_expire') then
      execute_sql('
         alter table saas_auth add (auto_token_expire date default null)', false);
   end if;
end;
/

create or replace trigger saas_auth_trig
   before insert or update
   on saas_auth
   for each row
begin
   if inserting then
      :new.created := sysdate;
      :new.created_by := nvl(sys_context('apex$session','app_user'), user);
      if :new.user_name is null then 
         :new.user_name := lower(:new.email);
      end if;
   end if;
   :new.updated := sysdate;
   :new.updated_by := nvl(sys_context('apex$session','app_user'), user);
   :new.email := lower(:new.email);
end;
/

exec drop_table('saas_auth_token');
